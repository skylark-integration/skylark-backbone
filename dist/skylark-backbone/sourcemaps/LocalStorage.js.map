{"version":3,"sources":["LocalStorage.js"],"names":["define","langx","_","models","Backbone","S4","Math","random","toString","substring","LocalStorage","klass","_construct","name","this","store","localStorage","getItem","records","split","save","setItem","join","create","model","id","set","idAttribute","JSON","stringify","push","find","update","include","jsonData","findAll","chain","map","compact","value","destroy","isNew","removeItem","reject","data","parse","sync","localSync","method","options","resp","errorMessage","collection","syncDfd","$","Deferred","undefined","error","code","DOMException","QUOTA_EXCEEDED_ERR","window","length","message","trigger","success","resolve","complete","promise","ajaxSync","getSyncMethod","apply"],"mappings":"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","file":"../LocalStorage.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-underscore\",\r\n  \"./models\",\r\n  \"./backbone\"\r\n],function(langx,_,models,Backbone){\r\n\r\n// A simple module to replace `Backbone.sync` with *localStorage*-based\r\n// persistence. Models are given GUIDS, and saved into a JSON object. Simple\r\n// as that.\r\n\r\n// Hold reference to Underscore.js and Backbone.js in the closure in order\r\n// to make things work even if they are removed from the global namespace\r\n\r\n// Generate four random hex digits.\r\nfunction S4() {\r\n   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n};\r\n\r\n// Generate a pseudo-GUID by concatenating random hexadecimal.\r\nfunction guid() {\r\n   return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n};\r\n\r\n// Our Store is represented by a single JS object in *localStorage*. Create it\r\n// with a meaningful name, like the name you'd give a table.\r\n// window.Store is deprecated, use Backbone.LocalStorage instead\r\nvar LocalStorage = langx.klass({\r\n  _construct : function(name) {\r\n    this.name = name;\r\n    var store = this.localStorage().getItem(this.name);\r\n    this.records = (store && store.split(\",\")) || [];\r\n  },\r\n\r\n  // Save the current state of the **Store** to *localStorage*.\r\n  save: function() {\r\n    this.localStorage().setItem(this.name, this.records.join(\",\"));\r\n  },\r\n\r\n  // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already\r\n  // have an id of it's own.\r\n  create: function(model) {\r\n    if (!model.id) {\r\n      model.id = guid();\r\n      model.set(model.idAttribute, model.id);\r\n    }\r\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\r\n    this.records.push(model.id.toString());\r\n    this.save();\r\n    return this.find(model);\r\n  },\r\n\r\n  // Update a model by replacing its copy in `this.data`.\r\n  update: function(model) {\r\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\r\n    if (!_.include(this.records, model.id.toString()))\r\n      this.records.push(model.id.toString()); this.save();\r\n    return this.find(model);\r\n  },\r\n\r\n  // Retrieve a model from `this.data` by id.\r\n  find: function(model) {\r\n    return this.jsonData(this.localStorage().getItem(this.name+\"-\"+model.id));\r\n  },\r\n\r\n  // Return the array of all models currently in storage.\r\n  findAll: function() {\r\n    return _(this.records).chain()\r\n      .map(function(id){\r\n        return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\r\n      }, this)\r\n      .compact()\r\n      .value();\r\n  },\r\n\r\n  // Delete a model from `this.data`, returning it.\r\n  destroy: function(model) {\r\n    if (model.isNew())\r\n      return false\r\n    this.localStorage().removeItem(this.name+\"-\"+model.id);\r\n    this.records = _.reject(this.records, function(id){\r\n      return id === model.id.toString();\r\n    });\r\n    this.save();\r\n    return model;\r\n  },\r\n\r\n  localStorage: function() {\r\n    return localStorage;\r\n  },\r\n\r\n  // fix for \"illegal access\" error on Android when JSON.parse is passed null\r\n  jsonData: function (data) {\r\n      return data && JSON.parse(data);\r\n  }\r\n\r\n});\r\n\r\n// localSync delegate to the model or collection's\r\n// *localStorage* property, which should be an instance of `Store`.\r\n// window.Store.sync and Backbone.localSync is deprectated, use Backbone.LocalStorage.sync instead\r\nLocalStorage.sync = models.localSync = function(method, model, options) {\r\n  var store = model.localStorage || model.collection.localStorage;\r\n\r\n  var resp, errorMessage, syncDfd = $.Deferred && $.Deferred(); //If $ is having Deferred - use it.\r\n\r\n  try {\r\n\r\n    switch (method) {\r\n      case \"read\":\r\n        resp = model.id != undefined ? store.find(model) : store.findAll();\r\n        break;\r\n      case \"create\":\r\n        resp = store.create(model);\r\n        break;\r\n      case \"update\":\r\n        resp = store.update(model);\r\n        break;\r\n      case \"delete\":\r\n        resp = store.destroy(model);\r\n        break;\r\n    }\r\n\r\n  } catch(error) {\r\n    if (error.code === DOMException.QUOTA_EXCEEDED_ERR && window.localStorage.length === 0)\r\n      errorMessage = \"Private browsing is unsupported\";\r\n    else\r\n      errorMessage = error.message;\r\n  }\r\n\r\n  if (resp) {\r\n    model.trigger(\"sync\", model, resp, options);\r\n    if (options && options.success)\r\n      options.success(resp);\r\n    if (syncDfd)\r\n      syncDfd.resolve(resp);\r\n\r\n  } else {\r\n    errorMessage = errorMessage ? errorMessage\r\n                                : \"Record Not Found\";\r\n\r\n    if (options && options.error)\r\n      options.error(errorMessage);\r\n    if (syncDfd)\r\n      syncDfd.reject(errorMessage);\r\n  }\r\n\r\n  // add compatibility with $.ajax\r\n  // always execute callback for success and error\r\n  if (options && options.complete) options.complete(resp);\r\n\r\n  return syncDfd && syncDfd.promise();\r\n};\r\n\r\n\r\nmodels.ajaxSync = models.sync;\r\n\r\nmodels.getSyncMethod = function(model) {\r\n  if(model.localStorage || (model.collection && model.collection.localStorage)) {\r\n    return models.localSync;\r\n  }\r\n\r\n  return models.ajaxSync;\r\n};\r\n\r\n// Override 'Backbone.sync' to default to localSync,\r\n// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'\r\nmodels.sync = function(method, model, options) {\r\n  return models.getSyncMethod(model).apply(this, [method, model, options]);\r\n};\r\n\r\nreturn Backbone.LocalStorage =  LocalStorage;\r\n\r\n});"]}