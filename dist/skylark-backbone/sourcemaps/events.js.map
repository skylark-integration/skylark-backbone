{"version":3,"sources":["events.js"],"names":["define","langx","Backbone","slice","Array","prototype","EventExtends","on","name","callback","context","this","fn","args","call","arguments","unshift","type","apply","_","overrided","once","one","bind","unbind","off","stopListening","obj","unlistenTo","BackboneEvented","Evented","inherit","EventedProto","Events","listenTo","listenToOnce","emit","trigger","extend"],"mappings":";;;;;;;AAAAA,QACE,sBACA,cACA,SAASC,EAAMC,GAEf,IAAIC,EAAQC,MAAMC,UAAUF,MAIxBG,GACAC,GAAM,SAASC,EAAMC,EAAUC,GAC3BA,EAAUA,GAAWC,KACrB,IAAIC,EAAM,WACR,IAAIC,EAAOV,EAAMW,KAAKC,UAAU,GACtB,OAANP,GACFK,EAAKG,QAAQD,UAAU,GAAGE,MAE5BR,EAASS,MAAMP,KAAME,IAIvB,OAFAD,EAAGO,EAAIV,EAEAE,KAAKS,UAAUZ,EAAKI,EAAGF,IAGlCW,KAAO,SAASb,EAAMC,EAAUC,GAC9B,OAAOC,KAAKW,IAAId,EAAKC,EAASC,IAEhCa,KAAO,SAASf,EAAMC,EAAUC,GAC5B,OAAOC,KAAKJ,GAAGC,EAAKC,EAASC,IAGjCc,OAAS,SAAShB,EAAMC,EAAUC,GAC9B,OAAOC,KAAKc,IAAIjB,EAAKC,EAASC,IAGlCgB,cAAgB,SAASC,EAAKnB,EAAMC,GAClC,OAAOE,KAAKiB,WAAWD,EAAInB,EAAKC,KAItCoB,EAAkB5B,EAAM6B,QAAQC,QAAQzB,GAExC0B,EAAeH,EAAgBxB,UAE3B4B,EAAS/B,EAAS+B,QACnBV,KAAMS,EAAaT,KACnBW,SAAUF,EAAaE,SACvBC,aAAcH,EAAaG,aAC3BV,IAAKO,EAAaP,IAClBlB,GAAKyB,EAAazB,GAClBc,KAAMW,EAAaX,KACnBK,cAAeM,EAAaN,cAC5BU,KAAMJ,EAAaI,KACnBC,QAASL,EAAaK,QACtBb,OAAQQ,EAAaR,OACrBI,WAAYI,EAAaJ,YAO5B,OAFA3B,EAAMqC,OAAOpC,EAAU+B,IAGrB3B,aAAeA,EACfuB,gBAAkBA","file":"../events.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"./backbone\"\r\n],function(langx,Backbone){\r\n  // Create a local reference to a common array method we'll want to use later.\r\n  var slice = Array.prototype.slice;\r\n\r\n  // Backbone.Events\r\n\r\n  var EventExtends = {\r\n      on  : function(name, callback, context){\r\n          context = context || this;\r\n          var fn =  function() {\r\n            var args = slice.call(arguments,1);\r\n            if (name==\"all\") {\r\n              args.unshift(arguments[0].type);\r\n            }\r\n            callback.apply(this, args);\r\n          };\r\n          fn._ = callback\r\n          \r\n          return this.overrided(name,fn,context);\r\n      },\r\n        \r\n      once : function(name, callback, context) {\r\n        return this.one(name,callback,context);\r\n      },\r\n      bind : function(name, callback, context) {\r\n          return this.on(name,callback,context);\r\n      },\r\n      \r\n      unbind : function(name, callback, context){\r\n          return this.off(name,callback,context);\r\n      },\r\n    \r\n      stopListening : function(obj, name, callback){\r\n        return this.unlistenTo(obj,name,callback);\r\n      }\r\n   },\r\n\r\n  BackboneEvented = langx.Evented.inherit(EventExtends),\r\n\r\n  EventedProto = BackboneEvented.prototype;\r\n  \r\n  var Events = Backbone.Events = {\r\n     bind: EventedProto.bind,\r\n     listenTo: EventedProto.listenTo,\r\n     listenToOnce: EventedProto.listenToOnce,\r\n     off: EventedProto.off,\r\n     on : EventedProto.on,\r\n     once: EventedProto.once,\r\n     stopListening: EventedProto.stopListening,\r\n     emit: EventedProto.emit,\r\n     trigger: EventedProto.trigger,\r\n     unbind: EventedProto.unbind,\r\n     unlistenTo: EventedProto.unlistenTo\r\n  };\r\n\r\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\r\n  // want global \"pubsub\" in a convenient place.\r\n  langx.extend(Backbone, Events);\r\n\r\n  return {\r\n    EventExtends : EventExtends,\r\n    BackboneEvented : BackboneEvented\r\n  };\r\n\r\n});"]}