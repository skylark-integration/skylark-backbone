{"version":3,"sources":["skylark-backbone.js"],"names":["define","skylark","$","Backbone","backbone","langx","methodMap","create","update","patch","delete","read","wrapError","model","options","error","resp","call","context","trigger","Entity","Stateful","inherit","sync","models","apply","this","arguments","matches","attrs","isMatch","attributes","fetch","entity","success","mixin","parse","serverAttrs","set","save","key","val","wait","validate","_validate","method","isNew","xhr","destroy","clone","stopListening","collection","defer","url","base","result","urlError","id","get","idAttribute","replace","encodeURIComponent","Collection","Evented","_construct","entities","comparator","_reset","reset","silent","setOptions","add","remove","merge","addOptions","splice","array","insert","at","Math","min","max","length","i","tail","Array","partial","initialize","toJSON","map","singular","isArray","slice","removed","_removeEntitys","changes","added","merged","_isEntity","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","isString","existing","push","hasChanged","cid","_prepareEntity","_addReference","orderChanged","some","m","index","_removeReference","previousEntitys","pop","unshift","shift","obj","_byId","entityId","has","where","first","findWhere","Error","isFunction","proxy","sortBy","pluck","attr","callbackOpts","constructor","prototype","validationError","indexOf","on","_onEntityEvent","off","event","prevId","previousAttributes","emulateHTTP","emulateJSON","type","defaults","params","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","textStatus","errorThrown","Xhr","request","EventExtends","name","callback","fn","args","_","overrided","once","one","bind","unbind","unlistenTo","BackboneEvented","EventedProto","Events","listenTo","listenToOnce","extend","cb","iteratee","instance","isObject","_isModel","modelMatcher","matcher","protoProps","staticProps","_constructor","child","addUnderscoreMethods","Class","methods","attribute","each","value","defaultVal","addMethod","events","helper","Object","defineProperty","[object Object]","newValue","modelId","forEach","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","any","include","includes","contains","invoke","toArray","size","head","take","initial","rest","drop","last","without","difference","shuffle","lastIndexOf","isEmpty","chain","sample","partition","groupBy","countBy","indexBy","findIndex","findLastIndex","Model","escape","noder","plugins","View","Plugin","uniqueId","preinitialize","pick","viewOptions","_ensureElement","tagName","selector","$el","render","_removeElement","setElement","element","undelegateEvents","_setElement","delegateEvents","el","match","delegateEventSplitter","delegate","eventName","listener","uid","undelegate","_createElement","createElement","className","_setAttributes","S4","random","toString","substring","LocalStorage","klass","store","localStorage","getItem","records","split","setItem","join","jsonData","findAll","compact","removeItem","localSync","errorMessage","syncDfd","Deferred","undefined","code","DOMException","QUOTA_EXCEEDED_ERR","window","message","resolve","complete","promise","ajaxSync","getSyncMethod","main"],"mappings":"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","file":"../skylark-backbone.js","sourcesContent":["define('skylark-backbone/backbone',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-jquery\"\r\n],function(skylark,$){\r\n//     from Backbone.js 1.2.3\r\n\r\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n//     Backbone may be freely distributed under the MIT license.\r\n//     For all details and documentation:\r\n//     http://backbonejs.org\r\n\tvar Backbone = skylark.backbone = {}\r\n    Backbone.$ = $;\r\n\r\n\treturn Backbone ;\r\n});\ndefine('skylark-backbone/models',[\r\n    \"skylark-langx/langx\"\r\n], function(langx) {\r\n\r\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n  // Wrap an optional error callback with a fallback error event.\r\n  var wrapError = function(model, options) {\r\n    var error = options.error;\r\n    options.error = function(resp) {\r\n      if (error) error.call(options.context, model, resp, options);\r\n      model.trigger('error', model, resp, options);\r\n    };\r\n  };\r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: models.emulateHTTP,\r\n      emulateJSON: models.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = langx.Xhr.request(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n\r\n  var Entity = langx.Stateful.inherit({\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    //escape: function(attr) {\r\n    //  return _.escape(this.get(attr));\r\n    //},\r\n\r\n    // Special-cased proxy to underscore's `_.matches` method.\r\n    matches: function(attrs) {\r\n      return langx.isMatch(this.attributes,attrs);\r\n    },\r\n\r\n    // Fetch the entity from the server, merging the response with the entity's\r\n    // local attributes. Any changed attributes will trigger a \"change\" event.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var entity = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (!entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Set a hash of entity attributes, and sync the entity to the server.\r\n    // If the server returns an attributes hash that differs, the entity's\r\n    // state will be `set` again.\r\n    save: function(key, val, options) {\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      var attrs;\r\n      if (key == null || typeof key === 'object') {\r\n        attrs = key;\r\n        options = val;\r\n      } else {\r\n        (attrs = {})[key] = val;\r\n      }\r\n\r\n      options = langx.mixin({validate: true, parse: true}, options);\r\n      var wait = options.wait;\r\n\r\n      // If we're not waiting and attributes exist, save acts as\r\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n      // the entity will be valid when the attributes, if any, are set.\r\n      if (attrs && !wait) {\r\n        if (!this.set(attrs, options)) return false;\r\n      } else if (!this._validate(attrs, options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var entity = this;\r\n      var success = options.success;\r\n      var attributes = this.attributes;\r\n      options.success = function(resp) {\r\n        // Ensure attributes are restored during synchronous saves.\r\n        entity.attributes = attributes;\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (wait) serverAttrs = langx.mixin({}, attrs, serverAttrs);\r\n        if (serverAttrs && !entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n\r\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n      if (attrs && wait) this.attributes = langx.mixin({}, attributes, attrs);\r\n\r\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n      var xhr = this.sync(method, this, options);\r\n\r\n      // Restore attributes.\r\n      this.attributes = attributes;\r\n\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this entity on the server if it was already persisted.\r\n    // Optimistically removes the entity from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var entity = this;\r\n      var success = options.success;\r\n      var wait = options.wait;\r\n\r\n      var destroy = function() {\r\n        entity.stopListening();\r\n        entity.trigger('destroy', entity, entity.collection, options);\r\n      };\r\n\r\n      options.success = function(resp) {\r\n        if (wait) destroy();\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        if (!entity.isNew()) entity.trigger('sync', entity, resp, options);\r\n      };\r\n\r\n      var xhr = false;\r\n      if (this.isNew()) {\r\n        langx.defer(options.success);\r\n      } else {\r\n        wrapError(this, options);\r\n        xhr = this.sync('delete', this, options);\r\n      }\r\n      if (!wait) destroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the entity's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base =\r\n        langx.result(this, 'urlRoot') ||\r\n        langx.result(this.collection, 'url') ||\r\n        urlError();\r\n      if (this.isNew()) return base;\r\n      var id = this.get(this.idAttribute);\r\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the entity. The default implementation is just to pass the response along.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    }\r\n  });\r\n\r\n  var Collection  = langx.Evented.inherit({\r\n    \"_construct\" : function(entities, options) {\r\n      options || (options = {});\r\n      if (options.entity) this.entity = options.entity;\r\n      if (options.comparator !== void 0) this.comparator = options.comparator;\r\n      this._reset();\r\n      if (entities) this.reset(entities, langx.mixin({silent: true}, options));\r\n    }\r\n  }); \r\n\r\n  // Default options for `Collection#set`.\r\n  var setOptions = {add: true, remove: true, merge: true};\r\n  var addOptions = {add: true, remove: false};\r\n\r\n  // Splices `insert` into `array` at index `at`.\r\n  var splice = function(array, insert, at) {\r\n    at = Math.min(Math.max(at, 0), array.length);\r\n    var tail = Array(array.length - at);\r\n    var length = insert.length;\r\n    var i;\r\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\r\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n  };\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial({\r\n\r\n    // The default entity for a collection is just a **Entity**.\r\n    // This should be overridden in most cases.\r\n    entity: Entity,\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // The JSON representation of a Collection is an array of the\r\n    // entities' attributes.\r\n    toJSON: function(options) {\r\n      return this.map(function(entity) { return entity.toJSON(options); });\r\n    },\r\n\r\n    // Proxy `models.sync` by default.\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Add a entity, or list of entities to the set. `entities` may be Backbone\r\n    // Entitys or raw JavaScript objects to be converted to Entitys, or any\r\n    // combination of the two.\r\n    add: function(entities, options) {\r\n      return this.set(entities, langx.mixin({merge: false}, options, addOptions));\r\n    },\r\n\r\n    // Remove a entity, or a list of entities from the set.\r\n    remove: function(entities, options) {\r\n      options = langx.mixin({}, options);\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n      var removed = this._removeEntitys(entities, options);\r\n      if (!options.silent && removed.length) {\r\n        options.changes = {added: [], merged: [], removed: removed};\r\n        this.trigger('update', this, options);\r\n      }\r\n      return singular ? removed[0] : removed;\r\n    },\r\n\r\n    // Update a collection by `set`-ing a new list of entities, adding new ones,\r\n    // removing entities that are no longer present, and merging entities that\r\n    // already exist in the collection, as necessary. Similar to **Entity#set**,\r\n    // the core operation for updating the data contained by the collection.\r\n    set: function(entities, options) {\r\n      if (entities == null) return;\r\n\r\n      options = langx.mixin({}, setOptions, options);\r\n      if (options.parse && !this._isEntity(entities)) {\r\n        entities = this.parse(entities, options) || [];\r\n      }\r\n\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n\r\n      var at = options.at;\r\n      if (at != null) at = +at;\r\n      if (at > this.length) at = this.length;\r\n      if (at < 0) at += this.length + 1;\r\n\r\n      var set = [];\r\n      var toAdd = [];\r\n      var toMerge = [];\r\n      var toRemove = [];\r\n      var modelMap = {};\r\n\r\n      var add = options.add;\r\n      var merge = options.merge;\r\n      var remove = options.remove;\r\n\r\n      var sort = false;\r\n      var sortable = this.comparator && at == null && options.sort !== false;\r\n      var sortAttr = langx.isString(this.comparator) ? this.comparator : null;\r\n\r\n      // Turn bare objects into entity references, and prevent invalid entities\r\n      // from being added.\r\n      var entity, i;\r\n      for (i = 0; i < entities.length; i++) {\r\n        entity = entities[i];\r\n\r\n        // If a duplicate is found, prevent it from being added and\r\n        // optionally merge it into the existing entity.\r\n        var existing = this.get(entity);\r\n        if (existing) {\r\n          if (merge && entity !== existing) {\r\n            var attrs = this._isEntity(entity) ? entity.attributes : entity;\r\n            if (options.parse) attrs = existing.parse(attrs, options);\r\n            existing.set(attrs, options);\r\n            toMerge.push(existing);\r\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n          }\r\n          if (!modelMap[existing.cid]) {\r\n            modelMap[existing.cid] = true;\r\n            set.push(existing);\r\n          }\r\n          entities[i] = existing;\r\n\r\n        // If this is a new, valid entity, push it to the `toAdd` list.\r\n        } else if (add) {\r\n          entity = entities[i] = this._prepareEntity(entity, options);\r\n          if (entity) {\r\n            toAdd.push(entity);\r\n            this._addReference(entity, options);\r\n            modelMap[entity.cid] = true;\r\n            set.push(entity);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove stale entities.\r\n      if (remove) {\r\n        for (i = 0; i < this.length; i++) {\r\n          entity = this.entities[i];\r\n          if (!modelMap[entity.cid]) toRemove.push(entity);\r\n        }\r\n        if (toRemove.length) this._removeEntitys(toRemove, options);\r\n      }\r\n\r\n      // See if sorting is needed, update `length` and splice in new entities.\r\n      var orderChanged = false;\r\n      var replace = !sortable && add && remove;\r\n      if (set.length && replace) {\r\n        orderChanged = this.length !== set.length || this.entities.some(function(m, index) {\r\n          return m !== set[index];\r\n        });\r\n        this.entities.length = 0;\r\n        splice(this.entities, set, 0);\r\n        this.length = this.entities.length;\r\n      } else if (toAdd.length) {\r\n        if (sortable) sort = true;\r\n        splice(this.entities, toAdd, at == null ? this.length : at);\r\n        this.length = this.entities.length;\r\n      }\r\n\r\n      // Silently sort the collection if appropriate.\r\n      if (sort) this.sort({silent: true});\r\n\r\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n      if (!options.silent) {\r\n        for (i = 0; i < toAdd.length; i++) {\r\n          if (at != null) options.index = at + i;\r\n          entity = toAdd[i];\r\n          entity.trigger('add', entity, this, options);\r\n        }\r\n        if (sort || orderChanged) this.trigger('sort', this, options);\r\n        if (toAdd.length || toRemove.length || toMerge.length) {\r\n          options.changes = {\r\n            added: toAdd,\r\n            removed: toRemove,\r\n            merged: toMerge\r\n          };\r\n          this.trigger('update', this, options);\r\n        }\r\n      }\r\n\r\n      // Return the added (or merged) entity (or entities).\r\n      return singular ? entities[0] : entities;\r\n    },\r\n\r\n    // When you have more items than you want to add or remove individually,\r\n    // you can reset the entire set with a new list of entities, without firing\r\n    // any granular `add` or `remove` events. Fires `reset` when finished.\r\n    // Useful for bulk operations and optimizations.\r\n    reset: function(entities, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      for (var i = 0; i < this.entities.length; i++) {\r\n        this._removeReference(this.entities[i], options);\r\n      }\r\n      options.previousEntitys = this.entities;\r\n      this._reset();\r\n      entities = this.add(entities, langx.mixin({silent: true}, options));\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return entities;\r\n    },\r\n\r\n    // Add a entity to the end of the collection.\r\n    push: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: this.length}, options));\r\n    },\r\n\r\n    // Remove a entity from the end of the collection.\r\n    pop: function(options) {\r\n      var entity = this.at(this.length - 1);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Add a entity to the beginning of the collection.\r\n    unshift: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: 0}, options));\r\n    },\r\n\r\n    // Remove a entity from the beginning of the collection.\r\n    shift: function(options) {\r\n      var entity = this.at(0);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Slice out a sub-array of entities from the collection.\r\n    slice: function() {\r\n      return slice.apply(this.entities, arguments);\r\n    },\r\n\r\n    // Get a entity from the set by id, cid, entity object with id or cid\r\n    // properties, or an attributes object that is transformed through entityId.\r\n    get: function(obj) {\r\n      if (obj == null) return void 0;\r\n      return this._byId[obj] ||\r\n        this._byId[this.entityId(obj.attributes || obj)] ||\r\n        obj.cid && this._byId[obj.cid];\r\n    },\r\n\r\n    // Returns `true` if the entity is in the collection.\r\n    has: function(obj) {\r\n      return this.get(obj) != null;\r\n    },\r\n\r\n    // Get the entity at the given index.\r\n    at: function(index) {\r\n      if (index < 0) index += this.length;\r\n      return this.entities[index];\r\n    },\r\n\r\n    // Return entities with matching attributes. Useful for simple cases of\r\n    // `filter`.\r\n    where: function(attrs, first) {\r\n      return this[first ? 'find' : 'filter'](attrs);\r\n    },\r\n\r\n    // Return the first entity with matching attributes. Useful for simple cases\r\n    // of `find`.\r\n    findWhere: function(attrs) {\r\n      return this.where(attrs, true);\r\n    },\r\n\r\n    // Force the collection to re-sort itself. You don't need to call this under\r\n    // normal circumstances, as the set will maintain sort order as each item\r\n    // is added.\r\n    sort: function(options) {\r\n      var comparator = this.comparator;\r\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\r\n      options || (options = {});\r\n\r\n      var length = comparator.length;\r\n      if (langx.isFunction(comparator)) comparator = langx.proxy(comparator, this);\r\n\r\n      // Run sort based on type of `comparator`.\r\n      if (length === 1 || langx.isString(comparator)) {\r\n        this.entities = this.sortBy(comparator);\r\n      } else {\r\n        this.entities.sort(comparator);\r\n      }\r\n      if (!options.silent) this.trigger('sort', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Pluck an attribute from each entity in the collection.\r\n    pluck: function(attr) {\r\n      return this.map(attr + '');\r\n    },\r\n\r\n    // Fetch the default set of entities for this collection, resetting the\r\n    // collection when they arrive. If `reset: true` is passed, the response\r\n    // data will be passed through the `reset` method instead of `set`.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var success = options.success;\r\n      var collection = this;\r\n      options.success = function(resp) {\r\n        var method = options.reset ? 'reset' : 'set';\r\n        collection[method](resp, options);\r\n        if (success) success.call(options.context, collection, resp, options);\r\n        collection.trigger('sync', collection, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Create a new instance of a entity in this collection. Add the entity to the\r\n    // collection immediately, unless `wait: true` is passed, in which case we\r\n    // wait for the server to agree.\r\n    create: function(entity, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var wait = options.wait;\r\n      entity = this._prepareEntity(entity, options);\r\n      if (!entity) return false;\r\n      if (!wait) this.add(entity, options);\r\n      var collection = this;\r\n      var success = options.success;\r\n      options.success = function(m, resp, callbackOpts) {\r\n        if (wait) collection.add(m, callbackOpts);\r\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n      };\r\n      entity.save(null, options);\r\n      return entity;\r\n    },\r\n\r\n    // **parse** converts a response into a list of entities to be added to the\r\n    // collection. The default implementation is just to pass it through.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    },\r\n\r\n    // Create a new collection with an identical list of entities as this one.\r\n    clone: function() {\r\n      return new this.constructor(this.entities, {\r\n        entity: this.entity,\r\n        comparator: this.comparator\r\n      });\r\n    },\r\n\r\n    // Define how to uniquely identify entities in the collection.\r\n    entityId: function(attrs) {\r\n      return attrs[this.entity.prototype.idAttribute || 'id'];\r\n    },\r\n\r\n    // Private method to reset all internal state. Called when the collection\r\n    // is first initialized or reset.\r\n    _reset: function() {\r\n      this.length = 0;\r\n      this.entities = [];\r\n      this._byId  = {};\r\n    },\r\n\r\n    // Prepare a hash of attributes (or other entity) to be added to this\r\n    // collection.\r\n    _prepareEntity: function(attrs, options) {\r\n      if (this._isEntity(attrs)) {\r\n        if (!attrs.collection) attrs.collection = this;\r\n        return attrs;\r\n      }\r\n      options = options ? langx.clone(options) : {};\r\n      options.collection = this;\r\n      var entity = new this.entity(attrs, options);\r\n      if (!entity.validationError) return entity;\r\n      this.trigger('invalid', this, entity.validationError, options);\r\n      return false;\r\n    },\r\n\r\n    // Internal method called by both remove and set.\r\n    _removeEntitys: function(entities, options) {\r\n      var removed = [];\r\n      for (var i = 0; i < entities.length; i++) {\r\n        var entity = this.get(entities[i]);\r\n        if (!entity) continue;\r\n\r\n        var index = this.indexOf(entity);\r\n        this.entities.splice(index, 1);\r\n        this.length--;\r\n\r\n        // Remove references before triggering 'remove' event to prevent an\r\n        // infinite loop. #3693\r\n        delete this._byId[entity.cid];\r\n        var id = this.entityId(entity.attributes);\r\n        if (id != null) delete this._byId[id];\r\n\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          entity.trigger('remove', entity, this, options);\r\n        }\r\n\r\n        removed.push(entity);\r\n        this._removeReference(entity, options);\r\n      }\r\n      return removed;\r\n    },\r\n\r\n    // Method for checking whether an object should be considered a entity for\r\n    // the purposes of adding to the collection.\r\n    _isEntity: function(entity) {\r\n      return entity instanceof Entity;\r\n    },\r\n\r\n    // Internal method to create a entity's ties to a collection.\r\n    _addReference: function(entity, options) {\r\n      this._byId[entity.cid] = entity;\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) this._byId[id] = entity;\r\n      entity.on('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method to sever a entity's ties to a collection.\r\n    _removeReference: function(entity, options) {\r\n      delete this._byId[entity.cid];\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) delete this._byId[id];\r\n      if (this === entity.collection) delete entity.collection;\r\n      entity.off('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method called every time a entity in the set fires an event.\r\n    // Sets need to update their indexes when entities change ids. All other\r\n    // events simply proxy through. \"add\" and \"remove\" events that originate\r\n    // in other collections are ignored.\r\n    _onEntityEvent: function(event, entity, collection, options) {\r\n      if (entity) {\r\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n        if (event === 'destroy') this.remove(entity, options);\r\n        if (event === 'change') {\r\n          var prevId = this.entityId(entity.previousAttributes());\r\n          var id = this.entityId(entity.attributes);\r\n          if (prevId !== id) {\r\n            if (prevId != null) delete this._byId[prevId];\r\n            if (id != null) this._byId[id] = entity;\r\n          }\r\n        }\r\n      }\r\n      this.trigger.apply(this, arguments);\r\n    }\r\n\r\n  });\r\n\r\n    function models() {\r\n        return models;\r\n    }\r\n\r\n    langx.mixin(models, {\r\n        // set a `X-Http-Method-Override` header.\r\n        emulateHTTP : false,\r\n\r\n        // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n        // `application/json` requests ... this will encode the body as\r\n        // `application/x-www-form-urlencoded` instead and will send the model in a\r\n        // form param named `model`.\r\n        emulateJSON : false,\r\n\r\n        sync : sync,\r\n\r\n        Entity: Entity,\r\n        Collection : Collection\r\n    });\r\n\r\n\r\n    return models;\r\n});\r\n\ndefine('skylark-backbone/events',[\r\n  \"skylark-langx/langx\",\r\n  \"./backbone\"\r\n],function(langx,Backbone){\r\n  // Create a local reference to a common array method we'll want to use later.\r\n  var slice = Array.prototype.slice;\r\n\r\n  // Backbone.Events\r\n\r\n  var EventExtends = {\r\n      on  : function(name, callback, context){\r\n          var fn =  function() {\r\n            var args = slice.call(arguments,1);\r\n            if (name==\"all\") {\r\n              args.unshift(arguments[0].type);\r\n            }\r\n            callback.apply(this, args);\r\n          };\r\n          fn._ = callback\r\n          \r\n          return this.overrided(name,fn,context);\r\n      },\r\n        \r\n      once : function(name, callback, context) {\r\n        return this.one(name,callback,context);\r\n      },\r\n      bind : function(name, callback, context) {\r\n          return this.on(name,callback,context);\r\n      },\r\n      \r\n      unbind : function(name, callback, context){\r\n          return this.off(name,callback,context);\r\n      },\r\n    \r\n      stopListening : function(obj, name, callback){\r\n        return this.unlistenTo(obj,name,callback);\r\n      }\r\n   },\r\n\r\n  BackboneEvented = langx.Evented.inherit(EventExtends),\r\n\r\n  EventedProto = BackboneEvented.prototype;\r\n  \r\n  var Events = Backbone.Events = {\r\n     bind: EventedProto.bind,\r\n     listenTo: EventedProto.listenTo,\r\n     listenToOnce: EventedProto.listenToOnce,\r\n     off: EventedProto.off,\r\n     on : EventedProto.on,\r\n     once: EventedProto.once,\r\n     stopListening: EventedProto.stopListening,\r\n     trigger: EventedProto.trigger,\r\n     unbind: EventedProto.unbind,\r\n     unlistenTo: EventedProto.unlistenTo\r\n  };\r\n\r\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\r\n  // want global \"pubsub\" in a convenient place.\r\n  langx.extend(Backbone, Events);\r\n\r\n  return {\r\n    EventExtends : EventExtends,\r\n    BackboneEvented : BackboneEvented\r\n  };\r\n\r\n});\ndefine('skylark-backbone/helper',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-underscore/underscore\",\r\n  \"./backbone\"\r\n],function(langx,_,Backbone){\r\n\r\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\r\n  // `attributes` object or collection's `models` array behind the scenes.\r\n  //\r\n  // collection.filter(function(model) { return model.get('age') > 10 });\r\n  // collection.each(this.addView);\r\n  //\r\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\r\n  var addMethod = function(length, method, attribute) {\r\n    switch (length) {\r\n      case 1: return function() {\r\n        return _[method](this[attribute]);\r\n      };\r\n      case 2: return function(value) {\r\n        return _[method](this[attribute], value);\r\n      };\r\n      case 3: return function(iteratee, context) {\r\n        return _[method](this[attribute], cb(iteratee, this), context);\r\n      };\r\n      case 4: return function(iteratee, defaultVal, context) {\r\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\r\n      };\r\n      default: return function() {\r\n        var args = slice.call(arguments);\r\n        args.unshift(this[attribute]);\r\n        return _[method].apply(_, args);\r\n      };\r\n    }\r\n  };\r\n\r\n  var addUnderscoreMethods = function(Class, methods, attribute) {\r\n    _.each(methods, function(length, method) {\r\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\r\n    });\r\n  };\r\n\r\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\r\n  var cb = function(iteratee, instance) {\r\n    if (_.isFunction(iteratee)) return iteratee;\r\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\r\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\r\n    return iteratee;\r\n  };\r\n\r\n  var modelMatcher = function(attrs) {\r\n    var matcher = _.matches(attrs);\r\n    return function(model) {\r\n      return matcher(model.attributes);\r\n    };\r\n  };\r\n\r\n  var extend  = Backbone.extend = function(protoProps, staticProps){\r\n    protoProps.constructor = this._constructor;\r\n    var child = this.inherit(protoProps);\r\n    _.extend(child,staticProps);\r\n  \r\n    return child;\r\n  };\r\n\r\n  return {\r\n    addUnderscoreMethods : addUnderscoreMethods,\r\n    extend : extend\r\n  };\r\n});\ndefine('skylark-backbone/Collection',[\r\n  \"skylark-langx/langx\",\r\n  \"./models\",\r\n  \"./backbone\",\r\n  \"./events\",\r\n  \"./helper\"\r\n],function(langx,models,Backbone,events,helper){\r\n\r\n  // Backbone.Collection\r\n  // -------------------\r\n\r\n  // If models tend to represent a single row of data, a Backbone Collection is\r\n  // more analogous to a table full of data ... or a small slice or page of that\r\n  // table, or a collection of rows that belong together for a particular reason\r\n  // -- all of the messages in this particular folder, all of the documents\r\n  // belonging to this particular author, and so on. Collections maintain\r\n  // indexes of their models, both in order, and for lookup by `id`.\r\n\r\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\r\n  // If a `comparator` is specified, the Collection will maintain\r\n  // its models in sort order, as they're added and removed.\r\n\r\n  var Collection = Backbone.Collection = models.Collection.inherit({\r\n      _construct : function(models, options) {\r\n        options || (options = {});\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n      },\r\n      // Initialize is an empty function by default. Override it with your own\r\n      // initialization logic.\r\n      initialize: function(){}\r\n\r\n  });\r\n\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial(events.EventExtends);\r\n\r\n  Object.defineProperty(Collection.prototype, \"model\",{\r\n    get() { return this.entity; },\r\n    set(newValue) { this.entity = newValue; }\r\n  });\r\n\r\n  Object.defineProperty(Collection.prototype, \"models\",{\r\n    get() { return this.entities; },\r\n    set(newValue) { this.entities = newValue; }\r\n  });\r\n\r\n  Collection.prototype.modelId = Collection.prototype.entityId;\r\n  Collection.prototype._isModel = Collection.prototype._isEntity;\r\n\r\n\r\n  // Underscore methods that we want to implement on the Collection.\r\n  // 90% of the core usefulness of Backbone Collections is actually implemented\r\n  // right here:\r\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\r\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\r\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\r\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\r\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\r\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\r\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\r\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\r\n\r\n  // Mix in each Underscore method as a proxy to `Collection#models`.\r\n  helper.addUnderscoreMethods(Collection, collectionMethods, 'models');\r\n\r\n  Collection.extend = helper.extend;\r\n\r\n  return Collection;\r\n\r\n});\ndefine('skylark-backbone/Model',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-underscore/underscore\",\r\n  \"./models\",\r\n  \"./backbone\",\r\n  \"./events\",\r\n  \"./helper\"\r\n],function(langx,_,models,Backbone,events,helper){\r\n\r\n  // Backbone.Model\r\n  // --------------\r\n\r\n  // Backbone **Models** are the basic data object in the framework --\r\n  // frequently representing a row in a table in a database on your server.\r\n  // A discrete chunk of data and a bunch of useful, related methods for\r\n  // performing computations and transformations on that data.\r\n\r\n  // Create a new model with the specified attributes. A client id (`cid`)\r\n  // is automatically generated and assigned for you.\r\n  var Model = Backbone.Model = models.Entity.inherit({\r\n      _construct : function(attributes, options) {\r\n        langx.Stateful.prototype._construct.apply(this,arguments);\r\n        this.initialize.apply(this, arguments);\r\n      },\r\n      // Initialize is an empty function by default. Override it with your own\r\n      // initialization logic.\r\n      initialize: function(){},\r\n\r\n      // Get the HTML-escaped value of an attribute.\r\n      escape: function(attr) {\r\n        return _.escape(this.get(attr));\r\n      },\r\n\r\n      // Special-cased proxy to underscore's `_.matches` method.\r\n      matches: function(attrs) {\r\n        return !!_.iteratee(attrs, this)(this.attributes);\r\n      }\r\n  });\r\n\r\n\r\n\r\n  // Attach all inheritable methods to the Model prototype.\r\n  Model.partial(events.EventExtends);\r\n\r\n  Model.extend = helper.extend;\r\n\r\n  return Model;\r\n});\ndefine('skylark-backbone/View',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/plugins\",\r\n  \"skylark-underscore/underscore\",\r\n  \"./backbone\",\r\n  \"./events\",\r\n  \"./helper\"\r\n],function(langx, $,noder,plugins,_,Backbone,events,helper){\r\n  // Backbone.View\r\n  // -------------\r\n\r\n  // Backbone Views are almost more convention than they are actual code. A View\r\n  // is simply a JavaScript object that represents a logical chunk of UI in the\r\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\r\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\r\n  // UI as a **View** allows you to define your DOM events declaratively, without\r\n  // having to worry about render order ... and makes it easy for the view to\r\n  // react to specific changes in the state of your models.\r\n\r\n  // Creating a Backbone.View creates its initial element outside of the DOM,\r\n  // if an existing element is not provided...\r\n\r\n    var View = Backbone.View = plugins.Plugin.inherit({\r\n      _construct :function(options) {\r\n          this.cid = _.uniqueId('view');\r\n          this.preinitialize.apply(this, arguments);\r\n          _.extend(this, _.pick(options, viewOptions));\r\n          this._ensureElement();\r\n          this.initialize.apply(this, arguments);\r\n\r\n      },\r\n\r\n      // The default `tagName` of a View's element is `\"div\"`.\r\n      tagName: 'div',\r\n\r\n      // query delegate for element lookup, scoped to DOM elements within the\r\n      // current view. This should be preferred to global lookups where possible.\r\n      $: function(selector) {\r\n        return this.$el.find(selector);\r\n      },\r\n\r\n      // preinitialize is an empty function by default. You can override it with a function\r\n      // or object.  preinitialize will run before any instantiation logic is run in the View\r\n      preinitialize: function(){},\r\n\r\n      // Initialize is an empty function by default. Override it with your own\r\n      // initialization logic.\r\n      initialize: function(){},\r\n\r\n      // **render** is the core function that your view should override, in order\r\n      // to populate its element (`this.el`), with the appropriate HTML. The\r\n      // convention is for **render** to always return `this`.\r\n      render: function() {\r\n        return this;\r\n      },\r\n\r\n      // Remove this view by taking the element out of the DOM, and removing any\r\n      // applicable Backbone.Events listeners.\r\n      remove: function() {\r\n        this._removeElement();\r\n        this.unlistenTo();\r\n        return this;\r\n      },\r\n\r\n      // Remove this view's element from the document and all event listeners\r\n      // attached to it. Exposed for subclasses using an alternative DOM\r\n      // manipulation API.\r\n      _removeElement: function() {\r\n        this.$el.remove();\r\n      },\r\n\r\n      // Change the view's element (`this.el` property) and re-delegate the\r\n      // view's events on the new element.\r\n      setElement: function(element) {\r\n        this.undelegateEvents();\r\n        this._setElement(element);\r\n        this.delegateEvents();\r\n        return this;\r\n      },\r\n\r\n      // Creates the `this.el` and `this.$el` references for this view using the\r\n      // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\r\n      // context or an element. Subclasses can override this to utilize an\r\n      // alternative DOM manipulation API and are only required to set the\r\n      // `this.el` property.\r\n      _setElement: function(el) {\r\n        this.$el = $(el);\r\n        this.el = this.$el[0];\r\n      },\r\n\r\n      // Set callbacks, where `this.events` is a hash of\r\n      //\r\n      // *{\"event selector\": \"callback\"}*\r\n      //\r\n      //     {\r\n      //       'mousedown .title':  'edit',\r\n      //       'click .button':     'save',\r\n      //       'click .open':       function(e) { ... }\r\n      //     }\r\n      //\r\n      // pairs. Callbacks will be bound to the view, with `this` set properly.\r\n      // Uses event delegation for efficiency.\r\n      // Omitting the selector binds the event to `this.el`.\r\n      delegateEvents: function(events) {\r\n        events || (events = langx.result(this, 'events'));\r\n        if (!events) return this;\r\n        this.undelegateEvents();\r\n        for (var key in events) {\r\n          var method = events[key];\r\n          if (!langx.isFunction(method)) method = this[method];\r\n          if (!method) continue;\r\n          var match = key.match(delegateEventSplitter);\r\n          this.delegate(match[1], match[2], langx.proxy(method, this));\r\n        }\r\n        return this;\r\n      },\r\n\r\n      // Add a single event listener to the view's element (or a child element\r\n      // using `selector`). This only works for delegate-able events: not `focus`,\r\n      // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\r\n      delegate: function(eventName, selector, listener) {\r\n        this.$el.on(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n        return this;\r\n      },\r\n\r\n      // Clears all callbacks previously bound to the view by `delegateEvents`.\r\n      // You usually don't need to use this, but may wish to if you have multiple\r\n      // Backbone views attached to the same DOM element.\r\n      undelegateEvents: function() {\r\n        if (this.$el) this.$el.off('.delegateEvents' + this.uid);\r\n        return this;\r\n      },\r\n\r\n      // A finer-grained `undelegateEvents` for removing a single delegated event.\r\n      // `selector` and `listener` are both optional.\r\n      undelegate: function(eventName, selector, listener) {\r\n        this.$el.off(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n        return this;\r\n      },\r\n\r\n      // Produces a DOM element to be assigned to your view. Exposed for\r\n      // subclasses using an alternative DOM manipulation API.\r\n      _createElement: function(tagName,attrs) {\r\n        return noder.createElement(tagName,attrs);\r\n      },\r\n\r\n      // Ensure that the View has a DOM element to render into.\r\n      // If `this.el` is a string, pass it through `$()`, take the first\r\n      // matching element, and re-assign it to `el`. Otherwise, create\r\n      // an element from the `id`, `className` and `tagName` properties.\r\n      _ensureElement: function() {\r\n        if (!this.el) {\r\n          var attrs = langx.mixin({}, langx.result(this, 'attributes'));\r\n          if (this.id) attrs.id = langx.result(this, 'id');\r\n          if (this.className) attrs['class'] = langx.result(this, 'className');\r\n          this.setElement(this._createElement(langx.result(this, 'tagName'),attrs));\r\n          this._setAttributes(attrs);\r\n        } else {\r\n          this.setElement(langx.result(this, 'el'));\r\n        }\r\n      },\r\n\r\n      // Set attributes from a hash on this view's element.  Exposed for\r\n      // subclasses using an alternative DOM manipulation API.\r\n      _setAttributes: function(attributes) {\r\n        this.$el.attr(attributes);\r\n      },\r\n      \r\n    });\r\n\r\n\r\n  View.partial(events.EventExtends);\r\n\r\n  // Cached regex to split keys for `delegate`.\r\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\r\n\r\n  // List of view options to be set as properties.\r\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\r\n\r\n  View.extend = helper.extend;\r\n\r\n  return View;\r\n});\ndefine('skylark-backbone/LocalStorage',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-underscore\",\r\n  \"./models\",\r\n  \"./backbone\"\r\n],function(langx,_,models,Backbone){\r\n\r\n// A simple module to replace `Backbone.sync` with *localStorage*-based\r\n// persistence. Models are given GUIDS, and saved into a JSON object. Simple\r\n// as that.\r\n\r\n// Hold reference to Underscore.js and Backbone.js in the closure in order\r\n// to make things work even if they are removed from the global namespace\r\n\r\n// Generate four random hex digits.\r\nfunction S4() {\r\n   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n};\r\n\r\n// Generate a pseudo-GUID by concatenating random hexadecimal.\r\nfunction guid() {\r\n   return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n};\r\n\r\n// Our Store is represented by a single JS object in *localStorage*. Create it\r\n// with a meaningful name, like the name you'd give a table.\r\n// window.Store is deprecated, use Backbone.LocalStorage instead\r\nvar LocalStorage = langx.klass({\r\n  _construct : function(name) {\r\n    this.name = name;\r\n    var store = this.localStorage().getItem(this.name);\r\n    this.records = (store && store.split(\",\")) || [];\r\n  },\r\n\r\n  // Save the current state of the **Store** to *localStorage*.\r\n  save: function() {\r\n    this.localStorage().setItem(this.name, this.records.join(\",\"));\r\n  },\r\n\r\n  // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already\r\n  // have an id of it's own.\r\n  create: function(model) {\r\n    if (!model.id) {\r\n      model.id = guid();\r\n      model.set(model.idAttribute, model.id);\r\n    }\r\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\r\n    this.records.push(model.id.toString());\r\n    this.save();\r\n    return this.find(model);\r\n  },\r\n\r\n  // Update a model by replacing its copy in `this.data`.\r\n  update: function(model) {\r\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\r\n    if (!_.include(this.records, model.id.toString()))\r\n      this.records.push(model.id.toString()); this.save();\r\n    return this.find(model);\r\n  },\r\n\r\n  // Retrieve a model from `this.data` by id.\r\n  find: function(model) {\r\n    return this.jsonData(this.localStorage().getItem(this.name+\"-\"+model.id));\r\n  },\r\n\r\n  // Return the array of all models currently in storage.\r\n  findAll: function() {\r\n    return _(this.records).chain()\r\n      .map(function(id){\r\n        return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\r\n      }, this)\r\n      .compact()\r\n      .value();\r\n  },\r\n\r\n  // Delete a model from `this.data`, returning it.\r\n  destroy: function(model) {\r\n    if (model.isNew())\r\n      return false\r\n    this.localStorage().removeItem(this.name+\"-\"+model.id);\r\n    this.records = _.reject(this.records, function(id){\r\n      return id === model.id.toString();\r\n    });\r\n    this.save();\r\n    return model;\r\n  },\r\n\r\n  localStorage: function() {\r\n    return localStorage;\r\n  },\r\n\r\n  // fix for \"illegal access\" error on Android when JSON.parse is passed null\r\n  jsonData: function (data) {\r\n      return data && JSON.parse(data);\r\n  }\r\n\r\n});\r\n\r\n// localSync delegate to the model or collection's\r\n// *localStorage* property, which should be an instance of `Store`.\r\n// window.Store.sync and Backbone.localSync is deprectated, use Backbone.LocalStorage.sync instead\r\nLocalStorage.sync = models.localSync = function(method, model, options) {\r\n  var store = model.localStorage || model.collection.localStorage;\r\n\r\n  var resp, errorMessage, syncDfd = $.Deferred && $.Deferred(); //If $ is having Deferred - use it.\r\n\r\n  try {\r\n\r\n    switch (method) {\r\n      case \"read\":\r\n        resp = model.id != undefined ? store.find(model) : store.findAll();\r\n        break;\r\n      case \"create\":\r\n        resp = store.create(model);\r\n        break;\r\n      case \"update\":\r\n        resp = store.update(model);\r\n        break;\r\n      case \"delete\":\r\n        resp = store.destroy(model);\r\n        break;\r\n    }\r\n\r\n  } catch(error) {\r\n    if (error.code === DOMException.QUOTA_EXCEEDED_ERR && window.localStorage.length === 0)\r\n      errorMessage = \"Private browsing is unsupported\";\r\n    else\r\n      errorMessage = error.message;\r\n  }\r\n\r\n  if (resp) {\r\n    model.trigger(\"sync\", model, resp, options);\r\n    if (options && options.success)\r\n      options.success(resp);\r\n    if (syncDfd)\r\n      syncDfd.resolve(resp);\r\n\r\n  } else {\r\n    errorMessage = errorMessage ? errorMessage\r\n                                : \"Record Not Found\";\r\n\r\n    if (options && options.error)\r\n      options.error(errorMessage);\r\n    if (syncDfd)\r\n      syncDfd.reject(errorMessage);\r\n  }\r\n\r\n  // add compatibility with $.ajax\r\n  // always execute callback for success and error\r\n  if (options && options.complete) options.complete(resp);\r\n\r\n  return syncDfd && syncDfd.promise();\r\n};\r\n\r\n\r\nmodels.ajaxSync = models.sync;\r\n\r\nmodels.getSyncMethod = function(model) {\r\n  if(model.localStorage || (model.collection && model.collection.localStorage)) {\r\n    return models.localSync;\r\n  }\r\n\r\n  return models.ajaxSync;\r\n};\r\n\r\n// Override 'Backbone.sync' to default to localSync,\r\n// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'\r\nmodels.sync = function(method, model, options) {\r\n  return models.getSyncMethod(model).apply(this, [method, model, options]);\r\n};\r\n\r\nreturn Backbone.LocalStorage =  LocalStorage;\r\n\r\n});\ndefine('skylark-backbone/main',[\r\n\t\"./backbone\",\r\n\t\"./Collection\",\r\n\t\"./events\",\r\n\t\"./Model\",\r\n\t\"./View\",\r\n\t\"./LocalStorage\"\r\n],function(backbone){\r\n\treturn backbone;\r\n});\ndefine('skylark-backbone', ['skylark-backbone/main'], function (main) { return main; });\n\n"]}